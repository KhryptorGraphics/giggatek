version: '3.8'

services:
  # Frontend service (PHP/Apache)
  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
    ports:
      - "80:80"
    volumes:
      - ./frontend:/var/www/html
      - ./frontend/uploads:/var/www/html/uploads
    depends_on:
      - backend
      - db
    environment:
      - BACKEND_URL=http://backend:5000
      - DB_HOST=db
      - DB_USER=giggatek_user
      - DB_PASSWORD=giggatek_password
      - DB_NAME=giggatek
    networks:
      - giggatek_network
    restart: unless-stopped

  # Backend service (Python/Flask)
  backend:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    ports:
      - "5000:5000"
    volumes:
      - ./backend:/app
      - ./logs/backend:/app/logs
    depends_on:
      - db
      - redis
    environment:
      - FLASK_APP=app.py
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - DB_HOST=db
      - DB_PORT=3306
      - DB_USER=giggatek_user
      - DB_PASSWORD=giggatek_password
      - DB_NAME=giggatek
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - EMAIL_HOST=smtp.example.com
      - EMAIL_PORT=587
      - EMAIL_HOST_USER=notifications@giggatek.com
      - EMAIL_HOST_PASSWORD=password
      - EMAIL_USE_TLS=True
    networks:
      - giggatek_network
    restart: unless-stopped

  # Database service (MySQL)
  db:
    image: mysql:8.0
    ports:
      - "3306:3306"
    volumes:
      - db_data:/var/lib/mysql
      - ./backend/database:/docker-entrypoint-initdb.d
      - ./logs/mysql:/var/log/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=root_password
      - MYSQL_DATABASE=giggatek
      - MYSQL_USER=giggatek_user
      - MYSQL_PASSWORD=giggatek_password
    networks:
      - giggatek_network
    restart: unless-stopped
    command: --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci

  # Cache and session storage (Redis)
  redis:
    image: redis:6.2-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - giggatek_network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Development admin tool - Adminer
  adminer:
    image: adminer
    ports:
      - "8080:8080"
    depends_on:
      - db
    networks:
      - giggatek_network
    restart: unless-stopped

  # Mailhog - Email testing service
  mailhog:
    image: mailhog/mailhog
    ports:
      - "1025:1025"  # SMTP server
      - "8025:8025"  # Web interface
    networks:
      - giggatek_network
    restart: unless-stopped

# Define networks
networks:
  giggatek_network:
    driver: bridge

# Define volumes
volumes:
  db_data:
  redis_data:
