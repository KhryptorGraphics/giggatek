version: '3.8'

services:
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: giggatek-prometheus
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - 9090:9090
    restart: unless-stopped
    networks:
      - monitoring_network
    depends_on:
      - alertmanager
    healthcheck:
      test: ["CMD", "wget", "--spider", "--quiet", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: giggatek-alertmanager
    volumes:
      - ./alertmanager:/etc/alertmanager
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    ports:
      - 9093:9093
    restart: unless-stopped
    networks:
      - monitoring_network
    healthcheck:
      test: ["CMD", "wget", "--spider", "--quiet", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  grafana:
    image: grafana/grafana:10.1.0
    container_name: giggatek-grafana
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=giggatek.com
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=smtp.giggatek.com:587
      - GF_SMTP_USER=grafana@giggatek.com
      - GF_SMTP_PASSWORD__FILE=/etc/grafana/secrets/smtp_password
      - GF_SMTP_FROM_ADDRESS=grafana@giggatek.com
    ports:
      - 3000:3000
    restart: unless-stopped
    networks:
      - monitoring_network
    healthcheck:
      test: ["CMD", "wget", "--spider", "--quiet", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  node-exporter:
    image: prom/node-exporter:v1.6.0
    container_name: giggatek-node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)'
    ports:
      - 9100:9100
    restart: unless-stopped
    networks:
      - monitoring_network
    healthcheck:
      test: ["CMD", "wget", "--spider", "--quiet", "http://localhost:9100/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  mysql-exporter:
    image: prom/mysqld-exporter:v0.15.0
    container_name: giggatek-mysql-exporter
    environment:
      - DATA_SOURCE_NAME=exporter:password@(mysql:3306)/
    ports:
      - 9104:9104
    restart: unless-stopped
    networks:
      - monitoring_network
      - app_network
    healthcheck:
      test: ["CMD", "wget", "--spider", "--quiet", "http://localhost:9104/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis-exporter:
    image: oliver006/redis_exporter:v1.51.0
    container_name: giggatek-redis-exporter
    environment:
      - REDIS_ADDR=redis://redis:6379
    ports:
      - 9121:9121
    restart: unless-stopped
    networks:
      - monitoring_network
      - app_network
    healthcheck:
      test: ["CMD", "wget", "--spider", "--quiet", "http://localhost:9121/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  blackbox-exporter:
    image: prom/blackbox-exporter:v0.24.0
    container_name: giggatek-blackbox-exporter
    volumes:
      - ./blackbox:/etc/blackbox_exporter
    command:
      - '--config.file=/etc/blackbox_exporter/blackbox.yml'
    ports:
      - 9115:9115
    restart: unless-stopped
    networks:
      - monitoring_network
    healthcheck:
      test: ["CMD", "wget", "--spider", "--quiet", "http://localhost:9115/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  pushgateway:
    image: prom/pushgateway:v1.6.0
    container_name: giggatek-pushgateway
    ports:
      - 9091:9091
    restart: unless-stopped
    networks:
      - monitoring_network
    healthcheck:
      test: ["CMD", "wget", "--spider", "--quiet", "http://localhost:9091/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.1
    container_name: giggatek-cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    ports:
      - 8080:8080
    restart: unless-stopped
    networks:
      - monitoring_network
    healthcheck:
      test: ["CMD", "wget", "--spider", "--quiet", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  alertmanager-bot:
    image: metalmatze/alertmanager-bot:0.4.3
    container_name: giggatek-alertmanager-bot
    environment:
      - TELEGRAM_TOKEN=${TELEGRAM_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
      - ALERTMANAGER_URL=http://alertmanager:9093
    restart: unless-stopped
    networks:
      - monitoring_network
    depends_on:
      - alertmanager

  promtail:
    image: grafana/promtail:2.8.0
    container_name: giggatek-promtail
    volumes:
      - ./promtail:/etc/promtail
      - /var/log:/var/log
    command:
      - '-config.file=/etc/promtail/promtail-config.yml'
    restart: unless-stopped
    networks:
      - monitoring_network
      - elk_network
    depends_on:
      - loki

  loki:
    image: grafana/loki:2.8.0
    container_name: giggatek-loki
    volumes:
      - ./loki:/etc/loki
      - loki_data:/data/loki
    command:
      - '-config.file=/etc/loki/loki-config.yml'
    ports:
      - 3100:3100
    restart: unless-stopped
    networks:
      - monitoring_network
      - elk_network
    healthcheck:
      test: ["CMD", "wget", "--spider", "--quiet", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

networks:
  monitoring_network:
    driver: bridge
  app_network:
    external: true
  elk_network:
    external: true

volumes:
  prometheus_data:
  alertmanager_data:
  grafana_data:
  loki_data:
